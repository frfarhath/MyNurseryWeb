@model IEnumerable<MyNursery.Areas.NUSAD.Models.UserDisplayViewModel>

@{
    ViewData["Title"] = "Manage Users";
}

<!-- [ breadcrumb ] start -->
<div class="page-header">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">Manage Users</h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a asp-area="NUSAD" asp-controller="Home" asp-action="Dashboard"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a href="#">Users</a></li>
                    <li class="breadcrumb-item"><a href="#">Manage Users</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>
<!-- [ breadcrumb ] end -->
<!-- [ Main Content ] start -->
<div class="row">
    <div class="col-xl-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">All Users</h5>
                <span class="text-muted">Search, filter, and manage users.</span>
            </div>
            <div class="card-body">

                <div class="row mb-3">
                    <div class="col-md-4 mb-2">
                        <input type="text" id="searchInput" class="form-control" placeholder="Search by first name, last name, or email..." onkeyup="filterTable()" />
                    </div>
                    <div class="col-md-4 mb-2">
                        <select id="roleFilter" class="form-control" onchange="filterTable()">
                            <option value="">-- Filter by Role --</option>
                            @{
                                // Get distinct roles from Model for dynamic options
                                var roles = Model.Select(u => u.Role).Distinct().OrderBy(r => r);
                                foreach (var role in roles)
                                {
                                    <option>@role</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-4 mb-2">
                        <select id="userTypeFilter" class="form-control" onchange="filterTable()">
                            <option value="">-- Filter by User Type --</option>
                            @{
                                // Distinct UserTypes
                                var userTypes = Model.Select(u => u.UserType).Distinct().OrderBy(t => t);
                                foreach (var type in userTypes)
                                {
                                    <option>@type</option>
                                }
                            }
                        </select>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-hover" id="usersTable">
                        <thead class="thead-light">
                            <tr>
                                <th>First Name</th>
                                <th>Last Name</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Added Date</th>
                                <th>Is Active</th>
                                <th>User Type</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Model)
                            {
                                <tr>
                                    <td>@user.FirstName</td>
                                    <td>@user.LastName</td>
                                    <td>@user.Email</td>
                                    <td>@user.Role</td>
                                    <td>@user.DateCreated.ToString("yyyy-MM-dd")</td>
                            
                                    <td>@(user.IsActive ? "Yes" : "No")</td>
                                    <td>@user.UserType</td>
                                    <td>
                                        <form asp-area="NUSAD" asp-controller="Users" asp-action="DeleteUser" asp-route-id="@user.Id" method="post" class="delete-form d-inline">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="btn btn-danger btn-sm">
                                                <i class="feather icon-trash-2"></i> Delete
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (!Model?.Any() ?? true)
                {
                    <div class="alert alert-info mt-4">
                        No users found.
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<!-- [ Main Content ] end -->
@section Scripts {
    <script>
                function filterTable() {
            const input = document.getElementById("searchInput").value.toLowerCase();
            const roleFilter = document.getElementById("roleFilter").value.toLowerCase();
            const userTypeFilter = document.getElementById("userTypeFilter").value.toLowerCase();

            const table = document.getElementById("usersTable");
            const trs = table.tBodies[0].getElementsByTagName("tr");

            for (let i = 0; i < trs.length; i++) {
                let tds = trs[i].getElementsByTagName("td");

                let firstName = tds[0].textContent.toLowerCase();
                let lastName = tds[1].textContent.toLowerCase();
                let email = tds[2].textContent.toLowerCase();
                let role = tds[3].textContent.toLowerCase();
                let userType = tds[6].textContent.toLowerCase(); 

                const matchesSearch = firstName.includes(input) || lastName.includes(input) || email.includes(input);
                const matchesRole = roleFilter === "" || role === roleFilter;
                const matchesUserType = userTypeFilter === "" || userType === userTypeFilter;

                trs[i].style.display = (matchesSearch && matchesRole && matchesUserType) ? "" : "none";
            }
        }


        document.addEventListener('DOMContentLoaded', () => {
            const deleteForms = document.querySelectorAll('.delete-form');

            deleteForms.forEach(form => {
                form.addEventListener('submit', async function (e) {
                    e.preventDefault();

                    if (!confirm("Are you sure you want to delete this user?")) return;

                    const formData = new FormData(form);
                    const token = formData.get("__RequestVerificationToken");

                    const response = await fetch(form.action, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': token,
                            'Accept': 'application/json'
                        },
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        alert(result.message);
                        form.closest('tr').remove();
                    } else {
                        alert("Failed to delete user.");
                    }
                });
            });
        });
    </script>
}
