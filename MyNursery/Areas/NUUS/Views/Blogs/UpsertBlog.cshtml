@model MyNursery.Models.BlogPost
@using Microsoft.AspNetCore.Mvc.Rendering

@{
    bool isEdit = Model?.Id > 0;
    ViewData["Title"] = isEdit ? "Edit Blog" : "Create Blog";
    string formAction = isEdit ? "EditBlog" : "CreateBlog";
    string formButtonText = isEdit ? "Update Blog" : "Publish Blog";
    string pageHeader = isEdit ? "Update Blog Post" : "Add New Blog Post";
    string pageSubHeader = isEdit
        ? "Modify the existing blog entry and save your changes."
        : "Use this form to create a new blog entry.";

    string GetImagePath(string type) =>
        Model.BlogImages?.FirstOrDefault(img => img.Type == type)?.ImagePath ?? string.Empty;
}

<div class="row">
    <div class="col-xl-8 mx-auto">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">@pageHeader</h5>
                <span class="text-muted">@pageSubHeader</span>
            </div>
            <div class="card-body">
                <form asp-action="@formAction" asp-controller="Blogs" asp-area="NUUS"
                      method="post" enctype="multipart/form-data" novalidate
                      onsubmit="return checkInternetBeforeSubmit()">
                    @if (isEdit)
                    {
                        @Html.AntiForgeryToken()
                        <input type="hidden" asp-for="Id" />
                    }

                    <div class="mb-3">
                        <label asp-for="Title" class="form-label"></label>
                        <input asp-for="Title" class="form-control" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="CategoryId" class="form-label"></label>
                        <select asp-for="CategoryId" class="form-select" asp-items="@(new SelectList(ViewBag.Categories, "Id", "Name"))">
                            <option value="">-- Select Category --</option>
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>

                    <!-- Cover Image -->
                    <div class="mb-3">
                        <label class="form-label">Cover Image</label>
                        <div id="coverImagePreview" class="mb-2">
                            @if (isEdit && !string.IsNullOrEmpty(GetImagePath("Cover")))
                            {
                                <img src="@GetImagePath("Cover")" class="img-fluid rounded" style="max-height:150px;" />
                            }
                        </div>
                        <input type="file" name="CoverImage" id="coverImageInput" class="form-control" accept="image/*" />
                    </div>

                    <!-- Optional Images -->
                    <div class="mb-1">
                        <label class="form-label">Optional Images (up to 5)</label>

                        <div id="existingOptionalImages" class="mb-3 d-flex flex-wrap gap-3">
                            @foreach (var image in Model.BlogImages?.Where(i => i.Type.StartsWith("Optional")) ?? Enumerable.Empty<MyNursery.Models.BlogImage>())
                            {
                                <div class="position-relative border rounded p-1" style="max-width: 150px;">
                                    <img src="@image.ImagePath" class="img-fluid rounded" style="max-height:150px;" />
                                    <input type="hidden" name="ExistingOptionalImageIds" value="@image.Id" />
                                    <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0" onclick="removeExistingImage(this)">×</button>
                                </div>
                            }
                        </div>

                        <div id="optionalImageInputs" class="mb-2"></div>
                        <div id="previewContainer" class="d-flex flex-wrap gap-3 mb-2"></div>

                        <button type="button" id="addOptionalImageBtn" class="btn btn-primary" style="background-color: color:white;">
                            + Add Optional Image
                        </button>

                    </div>

                    <!-- Content -->
                    <div class="mb-3">
                        <label asp-for="Content" class="form-label"></label>
                        <textarea asp-for="Content" class="form-control" id="classic-editor" rows="10"></textarea>
                        <span asp-validation-for="Content" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="PublishDate" class="form-label"></label>
                        <input asp-for="PublishDate" type="date" class="form-control" />
                        <span asp-validation-for="PublishDate" class="text-danger"></span>
                    </div>

                    @await Html.PartialAsync("_Notification")

                    <div id="offline-message" class="alert alert-danger d-none" role="alert">
                        You are offline. Please check your internet connection before submitting.
                    </div>

                    <div class="form-group text-end">
                        <button type="reset" class="btn btn-outline-secondary me-2">Reset</button>
                        <button type="submit" class="btn btn-primary">@formButtonText</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script src="~/assets/js/plugins/ckeditor.js"></script>
    <script>
        ClassicEditor
            .create(document.querySelector('#classic-editor'))
            .catch(error => console.error(error));

        // Cover Image Preview
        const coverInput = document.getElementById('coverImageInput');
        const coverPreview = document.getElementById('coverImagePreview');

        coverInput.addEventListener('change', function () {
            if (coverInput.files && coverInput.files[0]) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    coverPreview.innerHTML = ''; // clear existing
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.classList.add('img-fluid', 'rounded');
                    img.style.maxHeight = '150px';
                    coverPreview.appendChild(img);
                };
                reader.readAsDataURL(coverInput.files[0]);
            }
        });

        // Optional Images logic
        const maxOptional = 5;

        const inputContainer = document.getElementById('optionalImageInputs');
        const previewContainer = document.getElementById('previewContainer');
        const addBtn = document.getElementById('addOptionalImageBtn');

        addBtn.addEventListener('click', function () {
            const currentInputs = inputContainer.querySelectorAll('input[type="file"]');
            const existingCount = document.querySelectorAll('input[name="ExistingOptionalImageIds"]').length;
            const total = currentInputs.length + existingCount;

            if (total >= maxOptional) {
                alert(`You can upload up to ${maxOptional} optional images.`);
                return;
            }

            const input = document.createElement('input');
            input.type = 'file';
            input.name = 'OptionalImages';
            input.accept = 'image/*';
            input.classList.add('form-control', 'my-2');

            input.addEventListener('change', function () {
                if (input.files.length > 0) {
                    const file = input.files[0];
                    const reader = new FileReader();

                    reader.onload = function (e) {
                        const wrapper = document.createElement('div');
                        wrapper.classList.add('position-relative');
                        wrapper.style.maxWidth = '150px';

                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.classList.add('img-fluid', 'rounded');
                        img.style.maxHeight = '150px';

                        const removeBtn = document.createElement('button');
                        removeBtn.type = 'button';
                        removeBtn.innerText = '×';
                        removeBtn.classList.add('btn', 'btn-sm', 'btn-danger', 'position-absolute', 'top-0', 'end-0');

                        removeBtn.onclick = function () {
                            inputContainer.removeChild(input);
                            previewContainer.removeChild(wrapper);
                        };

                        wrapper.appendChild(img);
                        wrapper.appendChild(removeBtn);
                        previewContainer.appendChild(wrapper);
                    };

                    reader.readAsDataURL(file);
                }
            });

            inputContainer.appendChild(input);
            input.click(); // open file dialog immediately
        });

        function removeExistingImage(button) {
            const container = button.closest('div');
            // Mark the hidden input so server knows to remove it
            const input = container.querySelector('input[type="hidden"]');
            if (input) {
                input.name = "RemoveOptionalImageIds";
                input.value = input.value; // keep id value
            }
            container.style.display = 'none'; // hide in UI
        }
    </script>

    <script src="~/js/site.js"></script>
}
