@model IEnumerable<MyNursery.Models.BlogPost>
@using MyNursery.Utility
@using MyNursery.Areas.NUSAD.Models
@{
    ViewData["Title"] = "Manage Blogs";
}

<!-- [ breadcrumb ] start -->
<div class="page-header">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">Manage Blogs</h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a asp-area="NUUS" asp-controller="Home" asp-action="Dashboard">
                            <i class="feather icon-home"></i>
                        </a>
                    </li>
                    <li class="breadcrumb-item"><a href="#">Blogs</a></li>
                    <li class="breadcrumb-item"><a href="#">Manage Blogs</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>
<!-- [ breadcrumb ] end -->
<!-- [ Main Content ] start -->
<div class="row">
    <div class="col-xl-12">
        <div class="card shadow-sm">
            <div class="card-header">
                <h5 class="mb-0">All Blog Posts</h5>
                <small class="text-muted">Search, filter, and manage blog entries.</small>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <input type="text" id="searchInput" class="form-control" placeholder="Search by title..." onkeyup="filterTable()" />
                    </div>
                    <div class="col-md-3">
                        <select id="categoryFilter" class="form-control" onchange="filterTable()">
                            <option value="">-- Filter by Category --</option>
                            @if (ViewBag.Categories != null)
                            {
                                foreach (var cat in (List<BlogCategory>)ViewBag.Categories)
                                {
                                    <option value="@cat.Name.ToLower()">@cat.Name</option>
                                }
                            }
                        </select>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-hover" id="blogsTable">
                        <thead class="table-light">
                            <tr>
                                <th>Title</th>
                                <th>Category</th>
                                <th>Publish Date</th>
                                <th>Status</th>
                                <th style="min-width: 150px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var blog in Model)
                            {
                                var badgeClass = blog.Status switch
                                {
                                    SD.Status_Approved => "badge bg-success",
                                    SD.Status_Disapproved => "badge bg-danger",
                                    SD.Status_Pending => "badge bg-warning text-dark",
                                    _ => "badge bg-secondary"
                                };

                                var displayStatus = blog.Status switch
                                {
                                    SD.Status_Approved => "Accepted",
                                    SD.Status_Disapproved => "Declined",
                                    SD.Status_Pending => "Pending",
                                    _ => "Unknown"
                                };

                                <tr>
                                    <td>@blog.Title</td>
                                    <td>@blog.Category?.Name</td>
                                    <td>@blog.PublishDate?.ToString("yyyy-MM-dd")</td>
                                    <td><span class="@badgeClass">@displayStatus</span></td>
                                    <td>
                                        <button type="button" class="btn btn-info btn-sm me-1" onclick="viewBlog(@blog.Id)">
                                            <i class="feather icon-eye"></i> View
                                        </button>
                                        <a asp-action="EditBlog" asp-route-id="@blog.Id" class="btn btn-warning btn-sm me-1">
                                            <i class="feather icon-edit"></i> Edit
                                        </a>
                                        <form class="delete-form d-inline" asp-action="DeleteBlog" asp-route-id="@blog.Id" method="post" novalidate>
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="btn btn-danger btn-sm">
                                                <i class="feather icon-trash-2"></i> Delete
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (!(Model?.Any() ?? false))
                {
                    <div class="alert alert-info mt-4">
                        No blog posts found.
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<!-- [ Main Content ] end -->
<!-- View Blog Modal -->
<div class="modal fade" id="blogViewModal" tabindex="-1" aria-labelledby="blogViewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="blogViewModalLabel">Blog Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h4 id="blogTitle"></h4>
                <p><strong>Category:</strong> <span id="blogCategory"></span></p>
                <p><strong>Status:</strong> <span id="blogStatus"></span></p>
                <p><strong>Created on:</strong> <span id="blogCreatedAt"></span></p>
                <p><strong>Published on:</strong> <span id="blogDate"></span></p>

                <hr />

                <div id="blogContent"></div>

                <hr />

                <div id="blogImages" class="mt-3">
                    <div id="coverImageContainer" class="mb-3">
                        <p><strong>Cover Image:</strong></p>
                        <img id="coverImage" src="" alt="Cover Image" class="img-fluid" style="max-height:200px;" />
                    </div>

                    <div id="optionalImage1Container" class="mb-2">
                        <p><strong>Optional Image 1:</strong></p>
                        <img id="optionalImage1" src="" alt="Optional Image 1" class="img-fluid" style="max-height:150px;" />
                    </div>

                    <div id="optionalImage2Container" class="mb-2">
                        <p><strong>Optional Image 2:</strong></p>
                        <img id="optionalImage2" src="" alt="Optional Image 2" class="img-fluid" style="max-height:150px;" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function filterTable() {
            const input = document.getElementById("searchInput").value.toLowerCase();
            const categoryFilter = document.getElementById("categoryFilter").value.toLowerCase();
            const table = document.getElementById("blogsTable");
            const trs = table.tBodies[0].getElementsByTagName("tr");

            for (let i = 0; i < trs.length; i++) {
                let title = trs[i].getElementsByTagName("td")[0]?.textContent.toLowerCase() ?? "";
                let category = trs[i].getElementsByTagName("td")[1]?.textContent.toLowerCase().trim() ?? "";

                const matchesTitle = title.includes(input);
                const matchesCategory = categoryFilter === "" || category === categoryFilter;

                trs[i].style.display = (matchesTitle && matchesCategory) ? "" : "none";
            }
        }

        function viewBlog(id) {
            fetch(`/NUUS/Blogs/GetBlogDetails/${id}`)
                .then(res => res.json())
                .then(data => {
                    if (!data || !data.success) {
                        alert(data?.message || "Blog details not found.");
                        return;
                    }

                    document.getElementById("blogTitle").textContent = data.title || '';
                    document.getElementById("blogCategory").textContent = data.category || '';
                    document.getElementById("blogStatus").textContent = data.status || '';
                    document.getElementById("blogCreatedAt").textContent = data.createdAt || '';
                    document.getElementById("blogDate").textContent = data.publishDate || '';
                    document.getElementById("blogContent").innerHTML = data.content || '';

                    function setImage(containerId, imageId, url) {
                        const container = document.getElementById(containerId);
                        const img = document.getElementById(imageId);
                        if (url) {
                            container.style.display = 'block';
                            img.src = url;
                        } else {
                            container.style.display = 'none';
                            img.src = '';
                        }
                    }

                    setImage('coverImageContainer', 'coverImage', data.coverImage);
                    setImage('optionalImage1Container', 'optionalImage1', data.image1);
                    setImage('optionalImage2Container', 'optionalImage2', data.image2);

                    const blogViewModal = new bootstrap.Modal(document.getElementById('blogViewModal'));
                    blogViewModal.show();
                })
                .catch(() => alert('Error loading blog details.'));
        }

        document.addEventListener('DOMContentLoaded', () => {
            const deleteForms = document.querySelectorAll('.delete-form');

            deleteForms.forEach(form => {
                form.addEventListener('submit', async function (e) {
                    e.preventDefault();

                    if (!confirm("Are you sure you want to delete this blog?")) return;

                    const formData = new FormData(form);
                    const token = formData.get("__RequestVerificationToken");

                    const response = await fetch(form.action, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': token,
                            'Accept': 'application/json'
                        },
                        body: formData
                    });

                    if (!response.ok) {
                        alert("Failed to delete blog.");
                        return;
                    }

                    const result = await response.json();

                    if (result.success) {
                        alert(result.message);
                        form.closest('tr').remove();
                    } else {
                        alert(result.message || "Failed to delete blog.");
                    }
                });
            });
        });
    </script>
}
